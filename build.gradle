/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3.1/userguide/tutorial_java_projects.html
 */

// apply plugins
plugins {
    id 'net.ltgt.apt-idea' version '0.18'
}
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'idea'

// package config params
group = 'ru.mihaly4'
version = '1.0.2'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // compile fileTree(dir: 'libs', include: '*.jar')

    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'com.intellij:annotations:+@jar'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.google.dagger:dagger:2.17'
    implementation 'de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.6'
    implementation 'org.jsoup:jsoup:1.11.2'
    implementation 'org.apache.commons:commons-lang3:3.8.1'

    annotationProcessor 'com.google.dagger:dagger-compiler:2.17'

    testImplementation 'junit:junit:4.12'
    // testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
}

// Define the main class for the application
mainClassName = 'ru.mihaly4.vkmd.Bootstrap'

// Configuration for jar file
jar {
    baseName = 'vkmd'

    def dependencies = []
    sourceSets.getByName('main').compileClasspath.forEach({file ->
        dependencies.add(file.getName())
    })

    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': dependencies.join(' ')
    }

    dependsOn 'copyDependencies'
}

task copyDependencies(type: Copy) {
    from sourceSets.getByName('main').compileClasspath
    into libsDir
}

task deploy(type: Exec, dependsOn: [assemble]) {
    group = 'Distribution'
    description = 'Packaging your application in the executable file'

    def nativeType = ''
    def icon = ''

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        nativeType = 'exe'
        icon = 'windows/app.ico'
    }
    if (System.properties['os.name'].toLowerCase().contains('mac')) {
        nativeType = 'dmg'
        icon = 'mac/app.icns'
    }
    if (System.properties['os.name'].toLowerCase().contains('linux')) {
        nativeType = 'deb'
        icon = 'linux/app.png'
    }

    def dependencies = []
    sourceSets.getByName('main').compileClasspath.forEach({file ->
        dependencies.add('-srcfiles')
        dependencies.add(file.getName())
    })

    workingDir project.projectDir
    def primaryArgs = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', nativeType,
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-vendor', 'IAmRusty',
            '-name', 'VK Music Downloader',
            '-appclass', mainClassName,
            '-srcdir', libsDir,
            '-srcfiles', jar.archiveName,
            '-BappVersion=' + version,
            '-Bicon=' + (icon == '' ? '' : "${rootDir}/resources/deploy/${icon}")
    ] as List<String>
    commandLine = primaryArgs + dependencies
}
